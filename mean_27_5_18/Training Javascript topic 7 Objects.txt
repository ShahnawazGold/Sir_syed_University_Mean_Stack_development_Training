===========Objects======
Creating objects with object literals

A JavaScript object is a collection of properties where each property has a name and a value, similar to Hash, Map, or Dictionary in other languages. The name of a property can be any string, including an empty string. The value can be any value, such as a string, Boolean, number, and null, but it cannot be undefined. The object's properties can be defined even after you start using the object. But first, let's look at how we create objects in JavaScript.



======1) exmple 


var rect = {};   // creates an empty object

rect.width = 20;

rect.height = 10;
alert(rect.width);      // => 20
alert(rect.height);     // => 10


 var rect = { width: 20, height: 10 };
alert(rect.width);      // => 20
alert(rect.height);     // => 10


var rect = { width: 20, height: 10 };
rect.width = 30;        // => modify value 
alert(rect.width);      // => 30
alert(rect.height);     // => 10

=============2)exmple 


var rect = { width: 20, height: 10 };

// add new object

rect.color = { red: 0, green: 255, blue: 128 }; 

// add new method
rect.getArea = function() {                    
    return this.width * this.height;
};

alert(rect.color.red);             // => 0
alert(rect.color.green);           // => 255
alert(rect.color.blue);            // => 128
alert(rect.getArea());   


3) exmple 


  var rect = {

    width: 20, 
    height: 10,

    color: { red: 0, green: 255, blue: 128 }, // object property

    getArea: function() {                     // method property 
       return this.width * this.height;
    }
};
alert(rect.width);                 // => 20
alert(rect.height);                // => 10
alert(rect.color.red);             // => 0
alert(rect.color.green);           // => 255
alert(rect.color.blue);            // => 128
alert(rect.getArea()); 

=====================Getting property names with for-in=========


 1) exmple  

var car = { make: "Toyota", model: "Camry" };

for (var prop in car) {
   // => make: Toyota, and model: Camry
   alert(prop + ": " + car[prop]);  
}


2) exmple  


var car = {

    make: "Toyota", 
    model: "Camry", 

    print : function() {
        alert(this.make + " " + this.model);
    }
};

for (var prop in car) {

   if (typeof car[prop] !== "function") {
      alert(prop);         // => make, and model
   }
}


==================Creating objects with constructor functions=======

Object literal notation, such as var x = {}, is preferred if all you need is a single object and there is no need for multiple instances. However, if you need multiple instances, it is better to use a constructor function


function Book(isbn) {

    this.isbn = isbn;

    this.getIsbn = function () {
        return "Isbn is " + this.isbn;
    };
}



var book = new Book("901-3865");

alert(book.getIsbn());   



2) exmple 

function Book(isbn) {
    this.isbn = isbn;
}
Book.prototype.getIsbn = function () {
    return "Isbn is " + this.isbn;
};
var book = new Book("901-3865");
alert(book.getIsbn());    // => Isbn is 901-3865





=======================The value of this===========

================1) exmple

function Circle(radius) {                    
    this.radius = radius;
}
Circle.prototype.getRadius = function() {
    return this.radius;
}
var smallCircle = new Circle(5);

alert(smallCircle.getRadius());    // => 5

var largeCircle = new Circle(100);

alert(largeCircle.getRadius());    // => 100

===============2) exmples



var circle = {

    radius: 10,

    getRadius: function() {

        alert(this === circle);
        alert(this.radius);
    }
};

circle.getRadius();                 // => true, 10
var anotherCircle = {
    radius: 12
};
anotherCircle.getRadius = circle.getRadius;
anotherCircle.getRadius();         // => false, 12



===================
var name = 'First';

var student = {

    name: 'Middle',

    detail: {
        name: 'Last',

        getName: function() {
            alert(this.name);
        }
    }
}
var result = student.detail.getName; 
result();                    // => First (global scope)
student.detail.getName();    // => Last  (detail scope)


=================Prototypal inheritance==========

Unlike classical inheritance where classes inherit from classes, JavaScript objects inherit from other objects, called prototypes, in a prototypal inheritance system.


var account = {

    bank: "Bank of America", 
   // default value
    getBank: function() {
        return this.bank;
    }
};

==============

function createObject (p) {

    var F = function () {};    // Create a new and empty function
    F.prototype = p;
    return new F();
}




==================



var account = {

    bank: "Bank of America",   // just the default value
    getBank: function() {
        return this.bank;
    }
};

var savings = {};

savings.accountHolders = []; 
        
savings.getAccountHolders = function() {
   return this.accountHolders;
}

savings.accountHolders.push("Jack Saver");

savings.accountHolders.push("Mary Saver");

alert(savings.getAccountHolders()[0]);      // => Jack Saver
alert(savings.getAccountHolders()[1]);      // => Mary Saver
alert(account.getBank());                   // => Bank of America
savings.bank = "JP Morgan Chase";









